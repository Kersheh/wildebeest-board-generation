#!/usr/bin/python

import sys, fileinput

WHITE_ID = { "S", "O", "E", "J", "C", "G", "X", "H", "Z", "K", "W", "P", "B", "N", "R" }
BLACK_ID = { "s", "o", "e", "j", "c", "g", "x", "h", "z", "k", "w", "p", "b", "n", "r" }
BIO_ID = { "S", "s", "O", "o", "E", "e", "J", "j", "G", "g", "Z", "z", "K", "k", "W", "w", "P", "p", "B", "b", "N", "n", "R", "r" }

## An instance of a piece in Wildebeest
class Piece(object):
    def __init__(self, piece_id, x, y):
        self.id = piece_id
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return hash(self.__repr__())

    def __repr__(self):
        return "Piece({0}, {1}, {2})".format(self.id, self.x, self.y)

## An instance of a board of Wildebeeest
class Wildebeest(object):
    def __init__(self, player_turn, pieces, int_1, int_2, int_3):
        self.player_turn = player_turn
        self.pieces = pieces
        self.int_1 = int_1
        self.int_2 = int_2
        self.int_3 = int_3

    def __eq__(self, other):
        return self.__repr__() == other.__repr__()

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return hash(self.__repr__())

    def __repr__(self):
        s = self.player_turn + "\n"
        board = self.get_board()
        for line in board:
            for tile in line:
                s += "{0}".format(tile)
            s += "\n"
        s += self.int_1 + "\n" + self.int_2 + "\n" + self.int_3 + "\n"
        return s

    # return board as 2D array
    def get_board(self):
        board = [["." for i in range(11)] for j in range(11)]
        board[3][1] = "*"
        board[3][9] = "*"
        board[5][5] = "#"
        board[7][1] = "*"
        board[7][9] = "*"
        for piece in self.pieces:
            board[piece.x][piece.y] = piece.id
        return board

    # checks if piece is paralyzed
    def is_paralyzed(self, piece):
        board = self.get_board()
        if piece.id in WHITE_ID:
            friendly_pieces = WHITE_ID
            enemy_pieces = BLACK_ID
        else:
            friendly_pieces = BLACK_ID
            enemy_pieces = WHITE_ID

        for i in range(-1, 2):
            for j in range(-1, 2):
                # skip out-of-bounds coordinates
                if piece.x + i < 0 or piece.x + i > 10 or \
                   piece.y + j < 0 or piece.y + j > 10:
                    continue
                if board[piece.x + i][piece.y + j] in enemy_pieces:
                    if board[piece.x + i][piece.y + j] is "Z" or \
                       board[piece.x + i][piece.y + j] is "z":
                        return True
        return False

    # returns list of coordinates a piece can move based on its current location
    # note: accounts for collision with friendly pieces
    def legal_piece_coordinates(self, piece, friendly_pieces):
        board = self.get_board()
        coordinates = []

        # skip piece if paralyzed by enemy Beekeeper
        if piece.id is not "X" and piece.id is not "x" and \
           piece.id is not "H" and piece.id is not "h":
            if self.is_paralyzed(piece):
                return coordinates

        # moves like a king
        if piece.id is "S" or piece.id is "s" or piece.id is "O" or piece.id is "o" or \
           piece.id is "E" or piece.id is "e" or piece.id is "J" or piece.id is "j" or \
           piece.id is "C" or piece.id is "c" or piece.id is "G" or piece.id is "g" or \
           piece.id is "Z" or piece.id is "z" or piece.id is "K" or piece.id is "k":
            for i in range(-1, 2):
                for j in range(-1, 2):
                    # skip out-of-bounds coordinates
                    if piece.x + i < 0 or piece.x + i > 10 or \
                       piece.y + j < 0 or piece.y + j > 10:
                        continue
                    # skip current coordinate
                    if i is 0 and j is 0:
                        continue
                    # skip friendly pieces (except Gorilla)
                    if piece.id is not "G" and piece.id is not "g":
                        if board[piece.x + i][piece.y + j] in friendly_pieces:
                            continue
                    coordinates.append((piece.x + i, piece.y + j))

        # moves like a knight
        if piece.id is "E" or piece.id is "e" or piece.id is "N" or piece.id is "n":
            for i in range(-1, 2, 2):
                for j in range(-2, 3, 4):
                    if piece.x + i < 0 or piece.x + i > 10 or \
                       piece.y + j < 0 or piece.y + j > 10:
                        pass
                    else:
                        if board[piece.x + i][piece.y + j] not in friendly_pieces:
                            coordinates.append((piece.x + i, piece.y + j))
                    if piece.x + j < 0 or piece.x + j > 10 or \
                       piece.y + i < 0 or piece.y + i > 10:
                        pass
                    else:
                        if board[piece.x + j][piece.y + i] not in friendly_pieces:
                            coordinates.append((piece.x + j, piece.y + i))

        # moves like a golf cart (uncharged)
        if piece.id is "X" or piece.id is "x":
            if piece.y is not 0 and board[piece.x][piece.y - 1] not in friendly_pieces:
                coordinates.append((piece.x, piece.y - 1))
            if piece.y is not 10 and board[piece.x][piece.y + 1] not in friendly_pieces:
                coordinates.append((piece.x, piece.y + 1))

        # moves like a bishop (cuts off when path is blocked)
        if piece.id is "W" or piece.id is "w" or piece.id is "B" or piece.id is "b" or \
           piece.id is "E" or piece.id is "e":
            up_left, up_right, down_left, down_right = True, True, True, True
            for i in range(1, 11):
                if up_left:
                    if piece.x - i < 0 or piece.y - i < 0 or \
                       board[piece.x - i][piece.y - i] in friendly_pieces:
                        up_left = False
                    else:
                        coordinates.append((piece.x - i, piece.y - i))
                        # if enemy piece found, restrict further movement
                        if board[piece.x - i][piece.y - i] in WHITE_ID or \
                           board[piece.x - i][piece.y - i] in BLACK_ID:
                            up_left = False
                if up_right:
                    if piece.x - i < 0 or piece.y + i > 10 or \
                       board[piece.x - i][piece.y + i] in friendly_pieces:
                        up_right = False
                    else:
                        coordinates.append((piece.x - i, piece.y + i))
                        # if enemy piece found, restrict further movement
                        if board[piece.x - i][piece.y + i] in WHITE_ID or \
                           board[piece.x - i][piece.y + i] in BLACK_ID:
                            up_right = False
                if down_left:
                    if piece.x + i > 10 or piece.y - i < 0 or \
                       board[piece.x + i][piece.y - i] in friendly_pieces:
                        down_left = False
                    else:
                        coordinates.append((piece.x + i, piece.y - i))
                        # if enemy piece found, restrict further movement
                        if board[piece.x + i][piece.y - i] in WHITE_ID or \
                           board[piece.x + i][piece.y - i] in BLACK_ID:
                            down_left = False
                if down_right:
                    if piece.x + i > 10 or piece.y + i > 10 or \
                       board[piece.x + i][piece.y + i] in friendly_pieces:
                        down_right = False
                    else:
                        coordinates.append((piece.x + i, piece.y + i))
                        # if enemy piece found, restrict further movement
                        if board[piece.x + i][piece.y + i] in WHITE_ID or \
                           board[piece.x + i][piece.y + i] in BLACK_ID:
                            down_right = False

        # moves like a pawn (white side)
        if piece.id is "P" and board[piece.x + 1][piece.y] not in WHITE_ID and \
           board[piece.x + 1][piece.y] not in BLACK_ID:
            if piece.x is 1 and board[piece.x + 2][piece.y] not in WHITE_ID and \
               board[piece.x + 2][piece.y] not in BLACK_ID:
                coordinates.append((piece.x + 2, piece.y))
            if piece.x is not 10:
                coordinates.append((piece.x + 1, piece.y))

        # overtake enemy piece like a pawn (white side)
        if piece.id is "P" and piece.x is not 10:
            for i in range(-1, 2, 2):
                if piece.y + i > 0 and piece.y + i < 11:
                    if board[piece.x + 1][piece.y + i] not in friendly_pieces:
                        if board[piece.x + 1][piece.y + i] in WHITE_ID or \
                           board[piece.x + 1][piece.y + i] in BLACK_ID:
                            coordinates.append((piece.x + 1, piece.y + i))

        # moves like a pawn (black side)
        if piece.id is "p" and board[piece.x - 1][piece.y] not in WHITE_ID and \
           board[piece.x - 1][piece.y] not in BLACK_ID:
            if piece.x is 9 and board[piece.x - 2][piece.y] not in WHITE_ID and \
               board[piece.x - 2][piece.y] not in BLACK_ID:
                coordinates.append((piece.x - 2, piece.y))
            if piece.x is not 0:
                coordinates.append((piece.x - 1, piece.y))

        # overtake enemy piece like a pawn (black side)
        if piece.id is "p" and piece.x is not 0:
            for i in range(-1, 2, 2):
                if piece.y + i > 0 and piece.y + i < 11:
                    if board[piece.x - 1][piece.y + i] not in friendly_pieces:
                        if board[piece.x - 1][piece.y + i] in WHITE_ID or \
                           board[piece.x - 1][piece.y + i] in BLACK_ID:
                            coordinates.append((piece.x - 1, piece.y + i))

        # moves like a rook (cuts off when path is blocked)
        if piece.id is "R" or piece.id is "r" or piece.id is "E" or piece.id is "e":
            up, right, down, left = True, True, True, True
            for i in range(1, 11):
                if up:
                    if piece.x - i < 0 or board[piece.x - i][piece.y] in friendly_pieces:
                        up = False
                    else:
                        coordinates.append((piece.x - i, piece.y))
                        # if enemy piece found, restrict further movement
                        if board[piece.x - i][piece.y] in WHITE_ID or \
                           board[piece.x - i][piece.y] in BLACK_ID:
                            up = False
                if right:
                    if piece.y + i > 10 or board[piece.x][piece.y + i] in friendly_pieces:
                        right = False
                    else:
                        coordinates.append((piece.x, piece.y + i))
                        # if enemy piece found, restrict further movement
                        if board[piece.x][piece.y + i] in WHITE_ID or \
                           board[piece.x][piece.y + i] in BLACK_ID:
                            right = False
                if down:
                    if piece.x + i > 10 or board[piece.x + i][piece.y] in friendly_pieces:
                        down = False
                    else:
                        coordinates.append((piece.x + i, piece.y))
                        # if enemy piece found, restrict further movement
                        if board[piece.x + i][piece.y] in WHITE_ID or \
                           board[piece.x + i][piece.y] in BLACK_ID:
                            down = False
                if left:
                    if piece.y - i < 0 or board[piece.x][piece.y - i] in friendly_pieces:
                        left = False
                    else:
                        coordinates.append((piece.x, piece.y - i))
                        # if enemy piece found, restrict further movement
                        if board[piece.x][piece.y - i] in WHITE_ID or \
                           board[piece.x][piece.y - i] in BLACK_ID:
                            left = False
        return coordinates

    # get Piece object belonging to board at given coordinate
    def get_piece(self, x, y):
        for piece in self.pieces:
            if piece.x is x and piece.y is y:
                return piece

    # after effects that occur after a move is completed
    def after_effects(self, pieces):
        # prince joey exploding
        # golf cart (charged)
        return pieces

    # generate new board
    def generate_board(self, pieces):
        pieces = self.after_effects(pieces)
        return Wildebeest("B", pieces, self.int_1, self.int_2, self.int_3) \
               if self.player_turn is "W" else \
               Wildebeest("W", pieces, self.int_1, self.int_2, self.int_3)

    # generator function yields boards for every possible move
    def possible_moves(self):
        board = self.get_board()
        pieces = self.pieces[:]
        if self.player_turn is "W":
            friendly_pieces = WHITE_ID
            enemy_pieces = BLACK_ID
        else:
            friendly_pieces = BLACK_ID
            enemy_pieces = WHITE_ID

        for piece in self.pieces:
            if piece.id in friendly_pieces:
                # serpent
                if piece.id is "S" or piece.id is "s":
                    for move in self.legal_piece_coordinates(piece, friendly_pieces):
                        # skip enemy; serpent cannot move into enemy piece
                        if board[move[0]][move[1]] in enemy_pieces:
                            continue
                        # remove old piece
                        if piece in pieces:
                            pieces.remove(piece)
                        # add new piece
                        pieces.append(Piece(piece.id, move[0], move[1]))
                        # poison adjacent pieces
                        removed_pieces = [] # to track empress
                        for i in range(-1, 2):
                            for j in range(-1, 2):
                                if board[move[0] + i][move[1] + j] not in enemy_pieces or \
                                   board[move[0] + i][move[1] + j] not in BIO_ID:
                                    continue
                                removed_pieces.append(self.get_piece(move[0] + i, move[1] + j))
                                board[move[0] + i][move[1] + j] = "."
                                pieces.remove(self.get_piece(move[0] + i, move[1] + j))
                        # check if enemy old woman transforms into grand empress
                        for removed_piece in removed_pieces:
                            for i in range(-1, 2):
                                for j in range(-1, 2):
                                    if board[removed_piece.x + i][removed_piece.y + j] is "O":
                                        pieces.remove(self.get_piece(removed_piece.x + i, removed_piece.y + j))
                                        pieces.append(Piece("E", removed_piece.x + i, removed_piece.y + j))
                                    if board[removed_piece.x + i][removed_piece.y + j] is "o":
                                        pieces.remove(self.get_piece(removed_piece.x + i, removed_piece.y + j))
                                        pieces.append(Piece("e", removed_piece.x + i, removed_piece.y + j))
                        yield self.generate_board(pieces)
                        board = self.get_board() # reset temp board
                        pieces = self.pieces[:] # reset temp pieces
                # gorilla
                elif piece.id is "G" or piece.id is "g":
                    for move in self.legal_piece_coordinates(piece, friendly_pieces):
                        # cannot push gorilla
                        if board[move[0]][move[1]] is "G" or board[move[0]][move[1]] is "g":
                            continue
                        # attempts to push piece if piece found
                        if board[move[0]][move[1]] in friendly_pieces or \
                           board[move[0]][move[1]] in enemy_pieces:
                            id_pushed = board[move[0]][move[1]]
                            x_squished = (move[0] - piece.x) + move[0]
                            y_squished = (move[1] - piece.y) + move[1]
                            # cannot push piece off edge
                            if x_squished < 0 or x_squished > 10 or \
                               y_squished < 0 or y_squished > 10:
                                continue
                            # cannot push piece into gorilla
                            if board[x_squished][y_squished] is "G" or \
                               board[x_squished][y_squished] is "g":
                                continue
                            # remove pushed piece
                            pieces.remove(self.get_piece(move[0], move[1]))
                            # remove squished piece if exists
                            if board[x_squished][y_squished] in friendly_pieces or \
                               board[x_squished][y_squished] in enemy_pieces:
                                pieces.remove(self.get_piece(x_squished, y_squished))
                            # add pushed piece
                            pieces.append(Piece(id_pushed, x_squished, y_squished))
                        # remove old piece
                        if piece in pieces:
                            pieces.remove(piece)
                        # add new piece
                        pieces.append(Piece(piece.id, move[0], move[1]))
                        yield self.generate_board(pieces)
                        board = self.get_board() # reset temp board
                        pieces = self.pieces[:] # reset temp pieces
                # pawn becomes time machine
                elif piece.id is "P" or piece.id is "p":
                    for move in self.legal_piece_coordinates(piece, friendly_pieces):
                        # remove old piece
                        if piece in pieces:
                            pieces.remove(piece)
                        # transform pawn into time machine if reaches end of board
                        if piece.id is "P" and move[0] is 10:
                            pieces.append(Piece("H", move[0], move[1]))
                        elif piece.id is "p" and move[0] is 0:
                            pieces.append(Piece("h", move[0], move[1]))
                        # add new piece
                        else:
                            pieces.append(Piece(piece.id, move[0], move[1]))
                        # charge enemy golf cart if pawn moves to the middle of the board

                        # remove enemy piece
                        if board[move[0]][move[1]] in enemy_pieces:
                            pieces.remove(self.get_piece(move[0], move[1]))
                        yield self.generate_board(pieces)
                        board = self.get_board() # reset temp board
                        pieces = self.pieces[:] # reset temp pieces
                # king 
                elif piece.id is "K" or piece.id is "k":
                    for move in self.legal_piece_coordinates(piece, friendly_pieces):
                        # remove old piece
                        if piece in pieces:
                            pieces.remove(piece)
                        # transform king into king with a jet back if on middle square
                        if move[0] is 5 and move[1] is 5:
                            if piece.id is "K":
                                pieces.append(Piece("W", move[0], move[1]))
                            if piece.id is "k":
                                pieces.append(Piece("w", move[0], move[1]))
                        # add new piece
                        else:
                            pieces.append(Piece(piece.id, move[0], move[1]))
                        # remove enemy piece
                        if board[move[0]][move[1]] in enemy_pieces:
                            pieces.remove(self.get_piece(move[0], move[1]))
                        yield self.generate_board(pieces)
                        board = self.get_board() # reset temp board
                        pieces = self.pieces[:] # reset temp pieces
                # all other pieces
                else:
                    for move in self.legal_piece_coordinates(piece, friendly_pieces):
                        # remove old piece
                        if piece in pieces:
                            pieces.remove(piece)
                        # add new piece
                        pieces.append(Piece(piece.id, move[0], move[1]))
                        # remove enemy piece
                        if board[move[0]][move[1]] in enemy_pieces:
                            pieces.remove(self.get_piece(move[0], move[1]))
                        yield self.generate_board(pieces)
                        board = self.get_board() # reset temp board
                        pieces = self.pieces[:] # reset temp pieces

# load board from stdin
def load_board():
    pieces = []
    i = -1
    for line in fileinput.input():
        if i is 14:
            break
        if i is -1:
            player_turn = line.rstrip()
        elif i is 11:
            int_1 = line.rstrip()
        elif i is 12:
            int_2 = line.rstrip()
        elif i is 13:
            int_3 = line.rstrip()
        else:
            for j in range(len(line) - 1):
                if line[j] is "." or line[j] is "*" or line[j] is "#":
                    continue
                pieces.append(Piece(line[j], i, j))
        i += 1
    return Wildebeest(player_turn, pieces, int_1, int_2, int_3)

if __name__ == '__main__':
    if len(sys.argv) != 1:
        print "usage: ./a3 < [board_file.txt]"
        sys.exit(0)
    
    wildebeest = load_board()
    print wildebeest
    for move in wildebeest.possible_moves():
        print move